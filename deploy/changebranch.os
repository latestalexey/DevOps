#Использовать cmdline
#Использовать logos
#Использовать v8runner

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

КодВозврата = 0;
ИнфоОСкрипте = ТекущийСценарий();
КаталогСкрипта = ИнфоОСкрипте.Каталог;

ПодключитьСценарий(ОбъединитьПути(КаталогСкрипта, "..\lib\git.os"), "git");
git = Новый git();

АргументыКС = Новый ПарсерАргументовКоманднойСтроки();
АргументыКС.ДобавитьИменованныйПараметр("-fromHash");
АргументыКС.ДобавитьИменованныйПараметр("-toHash");
АргументыКС.ДобавитьИменованныйПараметр("-db");

Параметры = АргументыКС.Разобрать(АргументыКоманднойСтроки);

ПервыйХеш = Параметры["-fromHash"];
ВторойХеш = Параметры["-toHash"];
ИмяБазы = Параметры["-db"];

ИмяФайлаЖурнала = ОбъединитьПути(ТекущийКаталог(), "..\TMP\Log", ИмяБазы + ".log");
Файл = Новый Файл(ИмяФайлаЖурнала);
СоздатьКаталог(Файл.Путь);
КаталогЖурналов = Файл.Путь;

Журнал = Логирование.ПолучитьЛог("changebranches");
Журнал.УстановитьУровень(УровниЛога.Информация);
Журнал.УстановитьРаскладку(ЭтотОбъект);

КонсольЖурн = Новый ВыводЛогаВКонсоль;
ФайлЖурнала = Новый ВыводЛогаВФайл;
ФайлЖурнала.ОткрытьФайл(ИмяФайлаЖурнала);

Журнал.ДобавитьСпособВывода(ФайлЖурнала);
Журнал.ДобавитьСпособВывода(КонсольЖурн);

МассивКоммитов = Новый Массив;
МассивКоммитов.Добавить(ПервыйХеш);
МассивКоммитов.Добавить(ВторойХеш);

git.ПолучитьСписокИзмененийВФайл(ТекущийКаталог(), ОбъединитьПути(ТекущийКаталог(),"..\TMP\files.lst"), Журнал, МассивКоммитов);
